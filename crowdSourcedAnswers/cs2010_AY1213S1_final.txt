Note to firstTimers: 
This was created for AY17/18S2 of 2040C by CEG class of 2021, NUS. 
Please do contribute if you know the answers, or opn up a comment thread if you want to discuss. 
Note that we might have minor differences in syllabi, thus leading to blank answers. Enjoy! -- SUM 

Section 1
----------
1. SSSP on a tree, Counting CC of a graph, Seeing a vertex is reachable from another vertex, finding a topological sort for a DAG

2. 
AdjList vs EdgeList : 
Similarities - Much for space efficient than AdjMatrices/Bidirectional edge is stored twice. 
Differences - Look up for existence of edge is potentially O(E) (or O(logE) if sorted) in Edge list. IRL much less for AdjList. 

BFS vs DFS: 
Similarties - Both can be used to do SSSP on tree; Both can be used to find numCC, both are O(V+E)
Differences - BFS can be used for SSSP on unweighted graph. DFS can't be used in this instance; BFS uses a Q to traverse layer by layer, while DFS relies solely on recursion to go as deep as possible before backtracking. 

Floyd Warshall's vs Bellman Ford's: 
Similarities - ???
Differnces - FW mainly used for APSP, while BF normally used for SSSP. FW is O(V^3) while BF is O(VE) 

3. shortest path=10, longest path=13, #paths=7

Section 2
---------
1. True. 
Total degree for an undirected graph is always divisible by 2. If there are an odd number of odd degree vertices, (2k+1)(2d+1). This results in a number not divisible by 2. Contradiction.	 
2. True. If two edges are adjacent, put them in different sides. Since no node has more than one parent, this is always possible. 
3. ???
4. False. if there is a positive weight cycle in the way, the problem is undefined. (???)
5. ???

Section 3
---------
3.1.2  
A. None
B.  5, 0, 1, 2, 3, 4, 0
C. None
D. None

3.1.3

a. BFS to find numCC. Also store number vertices in each CC. 
If there are two CC with more than 1 vertex, return false. 
O(V+E)
b. for every vertex, count number of edges to it (degree)
if #odd_degree != 2, return false. 
O(V)
so total of O(V+E)

3.2.2. 
A. strongly Connected
B. Not
C. Not. 
D. Not
E. Strongly Connected

3.2.3
a. Go through the adjMtx to see if every edge has at least one incoming edge. If not, return false. 
b. Go through adjMtx to see if every edge has at least one outgoing edge. If not, return false. 
O(V) checks for optimization. 
c. Run BFS from each vertex. If there are any vertices out of reach in any run, return false.

O(V(V+E)) = O(V^2 + VE). Makes me wonder if a and b are actually optimizations or not. 

Section 4
---------
4.1 
a. Every square is a vertex, with Arrows pointing sideways or downwards (never UP). 
b. for every entry in the top row, do a separate djikstra. 
O(CVLogV). 
c. Read the distances from the last rows of each Djikstra. Take the minimum. 

4.2
For 1x3: 1+2 = 3
for 4x3: 4+19 = 23 
for 5x5: 0+0 = 0
for 6x5: 27+18 = 45

4.3
Find the sum of two smallest numbers

4.4 
Find the sum of two smallest column totals 

4.5 
???
